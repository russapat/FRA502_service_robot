<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="define">

  <xacro:property name="base_width" value="0.16"/>
  <xacro:property name="base_len" value="0.16"/>
  <xacro:property name="wheel_radius" value="0.035"/>
  <xacro:property name="base_wheel_gap" value="0.007"/>
  <xacro:property name="wheel_separation" value="0.15"/>
  <xacro:property name="wheel_joint_offset" value="0.02"/>

  <xacro:property name="caster_wheel_radius" value="${wheel_radius/2}"/>
  <xacro:property name="caster_wheel_mass" value="0.001"/>
  <xacro:property name="caster_wheel_joint_offset" value="-0.052"/>

  <xacro:property name="gripper_width" value="0.025"/>
  <xacro:property name="gripper_len" value="0.1"/>
  <xacro:property name="gripper_height" value="0.05"/>
  
  <!--Color Properties-->
  <material name="blue">
    <color rgba="0 0 0.8 1"/>
  </material>
  <material name="black">
    <color rgba="0 0 0 1"/>
  </material>
  <material name="white">
    <color rgba="1 1 1 1"/>
  </material>
  <material name="red">
    <color rgba="0.8 0.0 0.0 1.0"/>
  </material>

    <!--gazebo Properties-->
  <gazebo reference="base_link">
    <material>Gazebo/Black</material>
  </gazebo>
  <gazebo reference="left_wheel">
    <mu1>0.2</mu1>
    <material>Gazebo/Red</material>
  </gazebo>
  <gazebo reference="right_wheel">
    <mu1>0.2</mu1>
    <material>Gazebo/Red</material>
  </gazebo>
  <gazebo reference="caster_wheel">
    <mu1>0.1</mu1>
    <material>Gazebo/Blue</material>
  </gazebo>
  <gazebo reference="left_end_effector">
    <material>Gazebo/Red</material>
  </gazebo>
  <gazebo reference="right_end_effector">
    <material>Gazebo/Red</material>
  </gazebo>
  
<!--Plugin dif_drive-->
  <gazebo>
  <plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so">
    <alwaysOn>false</alwaysOn>
    <torque>5</torque>
    <rosDebugLevel>na</rosDebugLevel>
    <publishTf>1</publishTf>
    <!-- Plugin update rate in Hz -->
    <updateRate>40</updateRate>
    <!-- Name of left joint, defaults to `left_joint` -->
    <leftJoint>left_wheel_joint</leftJoint>
    <!-- Name of right joint, defaults to `right_joint` -->
    <rightJoint>right_wheel_joint</rightJoint>
    <!-- The distance from the center of one wheel to the other, in meters, defaults to 0.34 m -->
    <wheelSeparation>0.087</wheelSeparation>
    <!-- Diameter of the wheels, in meters, defaults to 0.15 m -->
    <wheelDiameter>0.035</wheelDiameter>
    <!-- Wheel acceleration, in rad/s^2, defaults to 0.0 rad/s^2 -->
    <wheelAcceleration>1.0</wheelAcceleration>
    <!-- Maximum torque which the wheels can produce, in Nm, defaults to 5 Nm -->
    <wheelTorque>20</wheelTorque>
    <!-- Topic to receive geometry_msgs/Twist message commands, defaults to `cmd_vel` -->
    <commandTopic>/cmd_vel</commandTopic>
    <!-- Topic to publish nav_msgs/Odometry messages, defaults to `odom` -->
    <odometryTopic>/odom</odometryTopic>
    <!-- Odometry frame, defaults to `odom` -->
    <odometryFrame>odom</odometryFrame>
    <!-- Robot frame to calculate odometry from, defaults to `base_footprint` -->
    <robotBaseFrame>base_footprint</robotBaseFrame>
    <!-- Odometry source, 0 for ENCODER, 1 for WORLD, defaults to WORLD -->
    <odometrySource>world</odometrySource>
    <!-- Set to true to publish transforms for the wheel links, defaults to false -->
    <publishWheelTF>false</publishWheelTF>
    <!-- Set to true to publish transforms for the odometry, defaults to true -->
    <publishOdomTF>true</publishOdomTF>
    <!-- Set to true to publish sensor_msgs/JointState on /joint_states for the wheel joints, defaults to false -->
    <publishWheelJointState>false</publishWheelJointState>
    <!-- Set to true to swap right and left wheels, defaults to true -->
    <legacyMode>false</legacyMode>
  </plugin>
</gazebo>

<!-- hokuyo -->
  <gazebo reference="hokuyo_link">
    <sensor type="ray" name="head_hokuyo_sensor">
      <pose>0 0 0 0 0 0</pose>
      <visualize>true</visualize>
      <update_rate>40</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>720</samples>
            <resolution>1</resolution>
            <min_angle>-3.14</min_angle>
            <max_angle>3.14</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.10</min>
          <max>30.0</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <!-- Noise parameters based on published spec for Hokuyo laser
               achieving "+-30mm" accuracy at range < 10m.  A mean of 0.0m and
               stddev of 0.01m will put 99.7% of samples within 0.03m of the true
               reading. -->
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin name="gazebo_ros_head_hokuyo_controller" filename="libgazebo_ros_laser.so">
        <topicName>/scan</topicName>
        <frameName>hokuyo_link</frameName>
      </plugin>
    </sensor>
  </gazebo>


  <!--Interial macros-->
  <xacro:macro name="cylinder_inertia" params="m r h">
    <inertial>
      <mass value="${m}"/>
      <inertia ixx="${m*(3*r*r+h*h)/12}" ixy = "0" ixz = "0" iyy="${m*(3*r*r+h*h)/12}" iyz = "0" izz="${m*r*r/2}"/> 
    </inertial>
  </xacro:macro>

  <xacro:macro name="box_inertia" params="m w h d">
    <inertial>
      <mass value="${m}"/>
      <inertia ixx="${m / 12.0 * (d*d + h*h)}" ixy="0.0" ixz="0.0" iyy="${m / 12.0 * (w*w + h*h)}" iyz="0.0" izz="${m / 12.0 * (w*w + d*d)}"/>
    </inertial>
  </xacro:macro>

  <xacro:macro name="sphere_inertia" params="m r">
    <inertial>
      <mass value="${m}"/>
      <inertia ixx="${2.0*m*(r*r)/5.0}" ixy="0.0" ixz="0.0" iyy="${2.0*m*(r*r)/5.0}" iyz="0.0" izz="${2.0*m*(r*r)/5.0}"/>
    </inertial>
  </xacro:macro>

  <!--Base Footprint-->
  <link name="base_footprint">
    <!--xacro:box_inertia m="0" w="0.0" h="0.0" d="0.0"/-->
    <visual>
        <origin xyz="5 5 0" rpy="0 0 0" />
        <geometry>
            <box size="0.001 0.001 0.001" />
        </geometry>
    </visual>
  </link>

  <!--Base link-->
  <link name="base_link">
    <xacro:box_inertia m="1" w="${base_len}" h="0.1" d="0.01"/>
    <visual>
      <origin xyz="0 0 0.04" rpy="0 0 0" />
      <geometry>
        <box size="${base_len} ${base_width} 0.1"/> <!--lenght width height-->
      </geometry>
      <material name="black"/>
    </visual>
    <collision>
      <geometry>
        <box size="${base_len} ${base_width} 0.01"/>
      </geometry>
    </collision>
  </link>

  <!--base_link to base_footprint Joint-->
  <joint name="base_link_joint" type="fixed">
    <origin xyz="0 0 ${wheel_radius + 0.005}" rpy="0 0 0" />
    <parent link="base_footprint"/>
    <child link="base_link" />
  </joint>

  <!--end effector link & joint macro-->
  <xacro:macro name="end_effector" params="prefix reflect">
    <link name="${prefix}_end_effector">
      <visual>
        <origin xyz="0 0 0"/>
        <geometry>
          <box size="${gripper_len} ${gripper_width} ${gripper_height}"/>
        </geometry>
        <material name="red"/>
      </visual>
      <collision>
        <origin xyz="0 0 0"/>
        <geometry>
          <box size="${gripper_len} ${gripper_width} ${gripper_height}"/>
        </geometry>
      </collision>
      <xacro:box_inertia m="0.001" w="${gripper_len}" h="${gripper_height}" d="${gripper_width}"/>
    </link>

    <joint name="${prefix}_end_effector_joint" type="prismatic">
      <axis xyz="0 1 0"/> 
      <parent link="base_link"/>
      <child link="${prefix}_end_effector"/>
      <origin xyz="${base_len-0.05} ${base_width/4*reflect} 0.05"/>
       <limit effort="50" velocity="1.0" lower="-0.08" upper="0.08" />
    </joint>
  </xacro:macro>

  <!--Create Left & Right Wheel links/joints-->
  <xacro:end_effector prefix="left" reflect="1"/>
  <xacro:end_effector prefix="right" reflect="-1"/>

  <!--Wheel link & joint macro-->
  <xacro:macro name="wheel" params="prefix reflect">
    <link name="${prefix}_wheel">
      <visual>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
        <geometry>
          <cylinder radius="${wheel_radius}" length="0.005"/>
        </geometry>
        <material name="red"/>
      </visual>
      <collision>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
        <geometry>
          <cylinder radius="${wheel_radius}" length="0.005"/>
        </geometry>
      </collision>
      <xacro:cylinder_inertia m="1" r="${wheel_radius}" h="0.005"/>
    </link>

    <joint name="${prefix}_wheel_joint" type="continuous">
      <axis xyz="0 1 0" rpy="0 0 0" />
      <parent link="base_link"/>
      <child link="${prefix}_wheel"/>
      <origin xyz="${wheel_joint_offset} ${((base_width/2)+base_wheel_gap)*reflect} -0.005" rpy="0 0 0"/>
    </joint>
  </xacro:macro>

  <!--Create Left & Right Wheel links/joints-->
  <xacro:wheel prefix="left" reflect="1"/>
  <xacro:wheel prefix="right" reflect="-1"/>

  <!--Caster Wheel Link-->
  <link name="caster_wheel">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <sphere radius="${caster_wheel_radius}"/>
      </geometry>
      <material name="blue"/>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <sphere radius="${caster_wheel_radius}"/>
      </geometry>
    </collision>
    <xacro:sphere_inertia m="1" r="${caster_wheel_radius}"/>
  </link>

  <!--Caster Wheel Joint-->
  <joint name="caster_wheel_joint" type="continuous">
    <axis xyz="0 1 0" rpy="0 0 0" />
    <parent link="base_link"/>
    <child link="caster_wheel"/>
    <origin xyz="${caster_wheel_joint_offset} 0 -${caster_wheel_radius+0.005}" rpy="0 0 0"/>
  </joint>

  <joint name="hokuyo_joint" type="fixed">
    <axis xyz="0 1 0" />
    <origin xyz="0 0 0.1" rpy="0 0 0"/>
    <parent link="base_link"/>
    <child link="hokuyo_link"/>
  </joint>

  <!-- Hokuyo Laser -->
  <link name="hokuyo_link">
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
    <box size="0.1 0.1 0.1"/>
      </geometry>
    </collision>

    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <mesh filename="package://project_sim/meshes/hokuyo.dae"/>
      </geometry>
    </visual>

    <inertial>
      <mass value="1e-5" />
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
    </inertial>
  </link>
</robot>